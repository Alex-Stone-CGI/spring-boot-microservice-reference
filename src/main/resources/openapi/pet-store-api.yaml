openapi: 3.0.3
info:
  title: Pet Store API
  version: "1.0"
  description: |
    This is an example Pet Store API to illustrate various microservice concepts.
    The API provides the following functionality:

    - New pets can be added to the pet store.
    - Customers can search for a pet.
    - Pets can be updated when details change.
    - Customers can purchase a pet.
    - Pet vaccination details are provided via a 3rd party API call.
  contact:
    email: alex.stone@cgi.com
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers: [
  {
    url: "http://localhost:8080/api/v1",
    description: "Local development"
  },
  {
    url: "https://staging.cloud.com/api/v1",
    description: "Staging server"
  },
  {
    url: "https://production.cloud.com/api/v1",
    description: "Production server"
  }
]

paths:
  /pet-store/pets:
    patch:
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: patchPet
      requestBody:
        description: Update an existent pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    post:
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
  /pet-store/pets/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: statuses
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PetStatus'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiplePetsResponse'
        '400':
          description: Invalid status value
  /pet-store/pets/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 2000
            example: 1546
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    post:
      summary: Called when a customer purchases a pet.
      description: Update the details for the pet to reflect the new owner.
      operationId: purchasePet
      parameters:
        - name: petId
          in: path
          description: Id of the pet to purchase
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The details of the purchasing customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid pet value
components:
  schemas:
    PetId:
      type: integer
      format: int64
      description: The unique Pet Shop Id for the pet.
      example: 1089
    PetName:
      type: string
      description: The pet answers to this name.
      example: Fido
    PetStatus:
      type: string
      description: The status of the pet in the store
      enum:
        - Available For Purchase
        - Pending Collection
        - Sold
      default: Available For Purchase
    PetVaccinationId:
      type: string
      description: The unique Id used to identify all vaccination details for the specified pet.
      example: AF54785412K
    Vaccination:
      type: object
      properties:
        name:
          type: string
          example: Parainfluenza
        dateOfAdminister:
          type: string
          format: date
          example: 2017-07-21
    PetType:
      type: string
      description: The type of animal the pet is.
      example: Dog
      enum:
        - Dog
        - Cat
        - Guinea Pig
        - Fish
    PhotoUrls:
      type: array
      description: The URLs to a selection of petty pictures.
      items:
        type: string
        example: https://www.freepik.com/free-photo/isolated-happy-smiling-dog-white-background-portrait-4_39994000.htm#uuid=4f38a524-aa89-430d-8041-1de9ffb631c6
    Customer:
      type: object
      required:
        - customerId
        - firstName
        - lastName
        - address
      properties:
        customerId:
          type: integer
          format: int64
          example: 246879
        username:
          type: string
          example: alex.stone
        firstName:
          type: string
          example: Alex
        lastName:
          type: string
          example: Stone
        email:
          type: string
          example: alex.stone@cgi.com
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      required:
        - street
        - city
        - postCode
        - country
      properties:
        street:
          type: string
          example: 40 Princes Street
        city:
          type: string
          example: Edinburgh
        postCode:
          type: string
          example: EH2 2BY
        country:
          type: string
          example: United Kingdom
    PetInformationItem:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: The name/type of additional information.
          example: Type of Coat
        description:
          type: string
          description: The actual additional information content.
          example: Short Hair
    NewPet:
      description: A Pet which is new to the Pet Store. Does not have any vaccination details, and will have a 'petStatus' of "Available For Purchase"
      type: object
      required:
        - id
        - vaccinationId
        - name
        - petType
      properties:
        id:
          $ref: '#/components/schemas/PetId'
        vaccinationId:
          $ref: '#/components/schemas/PetVaccinationId'
        name:
          $ref: '#/components/schemas/PetName'
        petType:
          $ref: '#/components/schemas/PetType'
        photoUrls:
          $ref: '#/components/schemas/PhotoUrls'
        additionalInformation:
          type: array
          items:
            $ref: '#/components/schemas/PetInformationItem'
    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
      type: object
      required:
        - id
        - vaccinationId
        - name
        - petType
        - petStatus
      properties:
        vaccinations:
          type: array
          items:
            $ref: '#/components/schemas/Vaccination'
        petStatus:
          $ref: '#/components/schemas/PetStatus'
        owner:
          $ref: '#/components/schemas/Customer'
    PetPatch:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/PetId'
        vaccinationId:
          $ref: '#/components/schemas/PetVaccinationId'
        name:
          $ref: '#/components/schemas/PetName'
        petType:
          $ref: '#/components/schemas/PetType'
        photoUrls:
          $ref: '#/components/schemas/PhotoUrls'
        additionalInformation:
          type: array
          items:
            $ref: '#/components/schemas/PetInformationItem'
        petStatus:
          $ref: '#/components/schemas/PetStatus'
    MultiplePetsResponse:
      type: object
      description: The result of a request which may return 2 or more Pets.
      properties:
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
