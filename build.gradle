import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'org.asciidoctor.jvm.convert' version "$asciiDoctorJvmVersion"
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
}

apply plugin: 'org.openapi.generator'

group = 'com.cgi.example'
description = 'Spring Boot Template Service modeled on an online Pet Store.'

java {
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Manage all the version numbers of Spring Boot and related libraries for us
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        mavenBom "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
    }
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework:spring-aspects'

    // OpenAPI, Swagger and API CodeGen related dependencies
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$springDocUiVersion"
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"
    implementation "org.openapitools:jackson-databind-nullable:$jacksonDatabindVersion"

    // Other
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // General purpose
    implementation "org.apache.commons:commons-collections4:$commonsCollections4Version"

    // Unit and integration test dependencies
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring31x:$embedMongoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$harmcrestVersion"
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'description' : project.getDescription(),
                    'java.version': "$javaVersion",
            ]
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/entity/**',
                    '**/model/**',
                    '**/dto/**',
                    '**/config/**'
            ])
        }))
    }
}

test() {
    useJUnitPlatform() {
        if (project.hasProperty('includeTags')) {
            setIncludeTags(project.includeTags.split(','))
        }

        if (project.hasProperty('excludeTags')) {
            setIncludeTags(project.excludeTags.split(','))
        }
    }
    finalizedBy jacocoTestReport
}

tasks.register('generateOpenAPI') {
    description = 'Generate Java classes and interfaces from OpenAPI specifications.'
    dependsOn generateOpenAPIForPetStore
    dependsOn generateOpenAPIForAnimalVaccination
}

def openApiConfigOptions = [
        skipDefaultInterface: 'true',
        skipModelGeneration : 'true',
        requestMappingMode            : 'api_interface',
        interfaceOnly                 : 'true',
        useJakartaEe                  : 'true',
        containerDefaultToNull        : 'true',
        useEnumCaseInsensitive        : 'true',
        additionalModelTypeAnnotations: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)'
]
tasks.register('generateOpenAPIForPetStore', GenerateTask) {
    group = build
    generatorName.set('spring')
    apiPackage = 'com.cgi.example.petstore.api'
    modelPackage = 'com.cgi.example.petstore.model'
    inputSpec.set("$rootDir/src/main/resources/openapi/pet-store-api.yaml")
    outputDir = "${layout.buildDirectory.get()}/generated/sources/openapi/petstore"
    configOptions.set(openApiConfigOptions)
    validateSpec = true
}
tasks.register('generateOpenAPIForAnimalVaccination', GenerateTask) {
    group = build
    generatorName.set('spring')
    apiPackage = 'com.cgi.example.external.animalvaccination.api'
    modelPackage = 'com.cgi.example.external.animalvaccination.model'
    inputSpec.set("$rootDir/src/main/resources/openapi/external/animal-vaccination-api.yaml")
    outputDir = "${layout.buildDirectory.get()}/generated/sources/openapi/external/animalvaccination"
    configOptions.set(openApiConfigOptions)
    validateSpec = true
}

compileJava.dependsOn generateOpenAPI

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
                       "${layout.buildDirectory.get()}/generated/sources/openapi/petstore/src/main/java",
                       "${layout.buildDirectory.get()}/generated/sources/openapi/external/animalvaccination/src/main/java"]
        }
    }
}

tasks.register('startVaccinationsWireMockServer', JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    getMainClass().set('com.cgi.example.petstore.VaccinationsWireMockServer')
    jvmArgs '-Xms256m', '-Xmx1024m'
    if (project.hasProperty('portNumber')) {
        args project.portNumber
    }
}
