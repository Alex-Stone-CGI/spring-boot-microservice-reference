plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.openapi.generator" version "7.1.0"
}

apply plugin: 'org.openapi.generator'

group = 'com.cgi.example'
description = 'Spring Boot Template Service modeled on an online Pet Store'

def versions = [
        java                : "21",
        springDocVersion    : "2.2.0",
        springDocUiVersion  : "1.7.0",
        mockWebserverVersion: "4.12.0",
        harmcrestVersion    : '1.3',
        resilience4jVersion : "2.1.0",
        commonsCollections4 : '4.4',
        wiremockVersion     : "3.0.1",
        mapstruct           : "1.5.5.Final"
]

java {
    sourceCompatibility = versions.java
    targetCompatibility = versions.java
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Manage all the version numbers of Spring Boot and related libraries for us
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.1.5'
        mavenBom 'org.junit.jupiter:junit-jupiter:5.10.0'
    }
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.mapstruct:mapstruct-processor:$versions.mapstruct"

    // Spring Boot dependencies
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.mapstruct:mapstruct:$versions.mapstruct"


    // OpenAPI, Swagger and API CodeGen related dependencies
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$versions.springDocVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$versions.springDocUiVersion"
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    // Other TODO describe and eliminate what isn't needed
    implementation "io.github.resilience4j:resilience4j-spring-boot3:$versions.resilience4jVersion"

    implementation "io.micrometer:micrometer-registry-prometheus"

    // General purpose utilities
    implementation "org.apache.commons:commons-collections4:$versions.commonsCollections4"

    // Unit and integration test dependencies
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$versions.wiremockVersion"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring31x:4.11.0"
    testImplementation "org.hamcrest:hamcrest-all:$versions.harmcrestVersion"
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'description' : project.getDescription(),
                    'java.version': JavaVersion.current(),
            ]
        }
    }
}

jacoco {
    toolVersion = "0.8.9"
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/entity/**',
                    '**/model/**',
                    '**/dto/**',
                    '**/config/**'
            ])
        }))
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.register('generateOpenAPI') {
    description = "Generate OpenAPI files"
    dependsOn generateOpenAPIForPetStore
    dependsOn generateOpenAPIForAnimalVaccination
}

def openApiConfigOptions = [
        skipDefaultInterface          : "true",
        skipModelGeneration           : "true",
        requestMappingMode            : 'api_interface',
        interfaceOnly                 : 'true',
        useJakartaEe                  : 'true',
        containerDefaultToNull        : 'true',
        useEnumCaseInsensitive        : 'true',
        additionalModelTypeAnnotations: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)'
]
tasks.register('generateOpenAPIForPetStore', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName.set('spring')
    apiPackage = 'com.cgi.example.petstore.api'
    modelPackage = 'com.cgi.example.petstore.model'
    inputSpec.set("$rootDir/src/main/resources/openapi/pet-store-api.yaml")
    outputDir = "${layout.buildDirectory.get()}/generated/sources/openapi/petstore"
    configOptions.set(openApiConfigOptions)
    validateSpec = true
}
tasks.register('generateOpenAPIForAnimalVaccination', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName.set('spring')
    apiPackage = 'com.cgi.example.thirdparty.animalvaccination.api'
    modelPackage = 'com.cgi.example.thirdparty.animalvaccination.model'
    inputSpec.set("$rootDir/src/main/resources/openapi/thirdparty/animal-vaccination-api.yaml")
    outputDir = "${layout.buildDirectory.get()}/generated/sources/openapi/thirdparty/animalvaccination"
    configOptions.set(openApiConfigOptions)
    validateSpec = true
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
                       'build/generated/sources/openapi/petstore/src/main/java',
                       'build/generated/sources/openapi/thirdparty/animalvaccination/src/main/java']
        }
    }
}

compileJava.dependsOn generateOpenAPI